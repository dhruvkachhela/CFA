# -*- coding: utf-8 -*-
"""submitCFA1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EoiY6aWjHiKxH9Yt0uUUF_NVKoejjTJ3
"""

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""The Stock


"""

stock = 'TITAN.NS'  #  stock
data = yf.download(stock, start='2021-01-01', end='2025-01-01')
data.dropna(inplace=True)
data.columns = data.columns.get_level_values(0)

plt.figure(figsize=(10,5))
plt.plot(data['Close'], label='Closing Price', color='pink')
plt.title("TITAN Closing Price (2019–2025)")
plt.xlabel("Date")
plt.ylabel("Price (INR)")
plt.legend()
plt.show()

plt.figure(figsize=(10,5))
plt.plot(data['Open'],label='Closing Price',color='pink')
plt.title("TITAN Opening  Price (2019–2025)")
plt.xlabel("Date")
plt.ylabel("Price (INR)")
plt.legend()
plt.show()

"""SMA , STD AND Z-SCORE"""

window = 40
data['SMA'] = data['Close'].rolling(window).mean()
data['STD'] = data['Close'].rolling(window).std()
data['Z-Score'] = (data['Close'] - data['SMA']) / data['STD']

"""Z-Score srtg and portfolio"""

data['ZSignal'] = 0
data.loc[data['Z-Score'] < -1, 'ZSignal'] = 1    # Buy
data.loc[data['Z-Score'] > 1, 'ZSignal'] = -1   # Sell

# Starting with ₹1,00,000
initial_balance = 100000
balance = initial_balance
portfolio_value = [balance]

# Track if we are currently holding stock
holding = False
buy_price = 0

# Loop over each row in the data
for i in range(1, len(data)):
    if data['ZSignal'].iloc[i] == 1 and not holding:
        # Buy
        buy_price = data['Close'].iloc[i]
        holding = True

    elif data['ZSignal'].iloc[i] == -1 and holding:
        # Sell
        sell_price = data['Close'].iloc[i]
        balance += (sell_price - buy_price)   # Add profit
        holding = False

    # Save current balance each day
    portfolio_value.append(balance)

# Convert list to Series so we can use Pandas
data['Z_Portfolio Value'] = portfolio_value

# Step 1: Calculate Daily Returns
data['Z_Daily Return'] = data['Z_Portfolio Value'].pct_change()

# Step 2: Calculate Cumulative Returns
data['Z_Cumulative Return'] = (1 + data['Z_Daily Return']).cumprod()

# Step 3: Sharpe Ratio
# Assuming risk-free rate = 0
sharpe_ratio = np.sqrt(252) * data['Z_Daily Return'].mean() / data['Z_Daily Return'].std()

# Step 4: Max Drawdown
rolling_max = data['Z_Portfolio Value'].cummax()
drawdown = (data['Z_Portfolio Value'] - rolling_max) / rolling_max
max_drawdown = drawdown.min()

print("Z_Initial Balance: ₹", initial_balance)
print("Z_Final Balance: ₹", round(data['Z_Portfolio Value'].iloc[-1], 2))
print("Z_Total Return: {:.2f}%".format(((data['Z_Portfolio Value'].iloc[-1] - initial_balance)/initial_balance)*100))
print("Sharpe Ratio:", round(sharpe_ratio, 2))
print("Maximum Drawdown: {:.2f}%".format(max_drawdown * 100))

plt.figure(figsize=(14,6))
plt.plot(data.index, portfolio_value, label='Z_Portfolio Value', color='blue')
plt.title("Z_Portfolio Value Over Time")
plt.xlabel("Date")
plt.ylabel("Z_Portfolio Balance (INR)")
plt.grid(True)
plt.legend()
plt.show()

"""bollinger srtg"""

data['UpperBand'] = data['SMA'] + 1 * data['STD']
data['LowerBand'] = data['SMA'] - 1 * data['STD']

data['BollSignal'] = 0
data.loc[data['Close'] < data['LowerBand'], 'BollSignal'] = 1    # Buy
data.loc[data['Close'] > data['UpperBand'], 'BollSignal'] = -1

# Starting with ₹1,00,000
initial_balance = 100000
balance = initial_balance
portfolio_value2 = [balance]

holding = False
buy_price = 0

# Loop over each row in the data
for i in range(1, len(data)):
    if data['BollSignal'].iloc[i] == 1 and not holding:
        # Buy
        buy_price = data['Close'].iloc[i]
        holding = True

    elif data['BollSignal'].iloc[i] == -1 and holding:
        # Sell
        sell_price = data['Close'].iloc[i]
        balance += (sell_price - buy_price)
        holding = False

    #  Append the balance at each step
    portfolio_value2.append(balance)

#  Now lengths will match
data['Boll_Portfolio Value'] = portfolio_value2

# Convert list to Series so we can use Pandas
data['Boll_Portfolio Value'] = portfolio_value2

# Step 1: Calculate Daily Returns
data['Boll_Daily Return'] = data['Boll_Portfolio Value'].pct_change()

# Step 2: Calculate Cumulative Returns
data['Boll_Cumulative Return'] = (1 + data['Boll_Daily Return']).cumprod()

# Step 3: Sharpe Ratio
# Assuming risk-free rate = 0
sharpe_ratio = np.sqrt(252) * data['Boll_Daily Return'].mean() / data['Boll_Daily Return'].std()

# Step 4: Max Drawdown
rolling_max = data['Boll_Portfolio Value'].cummax()
drawdown = (data['Boll_Portfolio Value'] - rolling_max) / rolling_max
max_drawdown = drawdown.min()

# Step 5: Print Metrics
print("Boll_Initial Balance: ₹", initial_balance)
print("Boll_Final Balance: ₹", round(data['Boll_Portfolio Value'].iloc[-1], 2))
print("Boll_Total Return: {:.2f}%".format(((data['Boll_Portfolio Value'].iloc[-1] - initial_balance)/initial_balance)*100))
print("Boll_Sharpe Ratio:", round(sharpe_ratio, 2))
print("Maximum Drawdown: {:.2f}%".format(max_drawdown * 100))

"""RSI srtg"""

delta = data['Close'].diff()

gain = delta.where(delta > 0, 0)
loss = -delta.where(delta < 0, 0)

avg_gain = gain.rolling(window=window).mean()
avg_loss = loss.rolling(window=window).mean()

rs = avg_gain / avg_loss
data['RSI'] = 100 - (100 / (1 + rs))

data['RSISignal'] = 0
data.loc[data['RSI'] < 40, 'RSISignal'] = 1   # Buy signal
data.loc[data['RSI'] > 60, 'RSISignal'] = -1  # Sell signal

"""portfoilio"""

initial_balance = 100000
balance = initial_balance
portfolio_value = [balance]

holding = False
buy_price = 0

for i in range(1, len(data)):
    if data['RSISignal'].iloc[i] == 1 and not holding:
        # Buy
        buy_price = data['Close'].iloc[i]
        holding = True

    elif data['RSISignal'].iloc[i] == -1 and holding:
        # Sell
        sell_price = data['Close'].iloc[i]
        balance += (sell_price - buy_price)  # Add profit
        holding = False

    portfolio_value.append(balance)

data['RSI_Portfolio Value'] = portfolio_value

# ----- Calculate Returns -----
data['RSI_Daily Return'] = data['RSI_Portfolio Value'].pct_change()
data['RSI_Cumulative Return'] = (1 + data['RSI_Daily Return']).cumprod()

# ----- Calculate Metrics -----
sharpe_ratio = np.sqrt(252) * data['RSI_Daily Return'].mean() / data['RSI_Daily Return'].std()

rolling_max = data['RSI_Portfolio Value'].cummax()
drawdown = (data['RSI_Portfolio Value'] - rolling_max) / rolling_max
max_drawdown = drawdown.min()

print("RSI_Initial Balance: ₹", initial_balance)
print("RSI_Final Balance: ₹", round(data['RSI_Portfolio Value'].iloc[-1], 2))
print("RSI_Total Return: {:.2f}%".format(((data['RSI_Portfolio Value'].iloc[-1] - initial_balance) / initial_balance) * 100))
print("RSI_Sharpe Ratio:", round(sharpe_ratio, 2))
print("RSI_Maximum Drawdown: {:.2f}%".format(max_drawdown * 100))

"""combine srtg"""

data.columns

# New Combined Signal with Z-Score also (OR condition)
data['FinalCombinedSignal'] = 0

# Buy: if Z-Score < -1 OR BollSignal == 1 OR RSISignal == 1
data.loc[(data['Z-Score'] < -1) | (data['BollSignal'] == 1) | (data['RSISignal'] == 1) , 'FinalCombinedSignal'] = 1

# Sell: if Z-Score > 1 OR BollSignal == -1 OR RSISignal == -1
data.loc[(data['Z-Score'] > 1)  | (data['RSISignal'] == -1) , 'FinalCombinedSignal'] = -1

# New Portfolio Simulation with Number of Trades and Profit Factor Calculation
initial_balance = 100000
balance = initial_balance
portfolio_value = [balance]

holding = False
buy_price = 0

# Variables for Number of Trades and Profit Factor
num_trades = 0
total_profit = 0
total_loss = 0
winning_trades = 0

for i in range(1, len(data)):
    if data['FinalCombinedSignal'].iloc[i] == 1 and not holding:
        buy_price = data['Close'].iloc[i]
        holding = True

    elif data['FinalCombinedSignal'].iloc[i] == -1 and holding:
        sell_price = data['Close'].iloc[i]
        trade_profit = (sell_price - buy_price)

        # If profit, add to total profit; if loss, add to total loss
        if trade_profit > 0:
            total_profit += trade_profit
            winning_trades += 1
        else:
            total_loss += abs(trade_profit)

        balance += trade_profit
        holding = False

        num_trades += 1  # Increment number of trades

    portfolio_value.append(balance)

# Save Portfolio Value
data['Final_Portfolio Value'] = portfolio_value

# Returns
data['Final_Daily Return'] = data['Final_Portfolio Value'].pct_change()
data['Final_Cumulative Return'] = (1 + data['Final_Daily Return']).cumprod()

annualized_return = (balance / initial_balance) ** (252 / len(data)) - 1
win_rate = (winning_trades / num_trades) * 100 if num_trades > 0 else 0

# Sharpe Ratio & Max Drawdown
sharpe_final = np.sqrt(252) * data['Final_Daily Return'].mean() / data['Final_Daily Return'].std()

rolling_max = data['Final_Portfolio Value'].cummax()
drawdown = (data['Final_Portfolio Value'] - rolling_max) / rolling_max
max_drawdown_final = drawdown.min()


# Calculate Profit Factor
if total_loss > 0:
    profit_factor = total_profit / total_loss
else:
    profit_factor = float('inf')  # If no loss, the profit factor is infinite

# Print Results
print("Final Combined Initial Balance: ₹", initial_balance)
print("Final Combined Final Balance: ₹", round(data['Final_Portfolio Value'].iloc[-1], 2))
print("Final Combined Total Return: {:.2f}%".format(((data['Final_Portfolio Value'].iloc[-1] - initial_balance)/initial_balance)*100))
print("Final Combined Sharpe Ratio:", round(sharpe_final, 2))
print("Final Combined Maximum Drawdown: {:.2f}%".format(max_drawdown_final * 100))
print("Annualized Return: {:.2f}%".format(annualized_return * 100))
print("Number of Trades: ", num_trades)
print("Profit Factor: ", round(profit_factor, 2))
print("win_rate : {:.2f}%".format(win_rate))

plt.figure(figsize=(14,6))
plt.plot(data.index, data['Final_Portfolio Value'], label='Final Combined Portfolio Value', color='green')
plt.title("Final Combined Portfolio Value Over Time")
plt.xlabel("Date")
plt.ylabel("Portfolio Balance (INR)")
plt.grid(True)
plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot(data.index, data['Z_Portfolio Value'], label='Z-Score Strategy', linestyle='--')
plt.plot(data.index, data['Boll_Portfolio Value'], label='Bollinger Band Strategy', linestyle='--')
plt.plot(data.index, data['RSI_Portfolio Value'], label='RSI Strategy', linestyle='--')
plt.plot(data.index, data['Final_Portfolio Value'], label='Final Combined Strategy', linewidth=2, color='black')

plt.title('Portfolio Value Comparison (TITAN.NS)', fontsize=18)
plt.xlabel('Date', fontsize=14)
plt.ylabel('Portfolio Balance (INR)', fontsize=14)
plt.legend(fontsize=12)
plt.grid(True)
plt.show()

# Create a dictionary with all metrics
summary_data = {
    'Strategy': ['Z-Score', 'Bollinger Band', 'RSI', 'Final Combined'],
    'Total Return (%)': [
        ((data['Z_Portfolio Value'].iloc[-1] - 100000) / 100000) * 100,  # Changed to Z_Portfolio Value
        ((data['Boll_Portfolio Value'].iloc[-1] - 100000) / 100000) * 100,  # Changed to Boll_Portfolio Value
        ((data['RSI_Portfolio Value'].iloc[-1] - 100000) / 100000) * 100,  # Changed to RSI_Portfolio Value
        ((data['Final_Portfolio Value'].iloc[-1] - 100000) / 100000) * 100
    ],
    'Sharpe Ratio': [
        np.sqrt(252) * data['Z_Daily Return'].mean() / data['Z_Daily Return'].std(),  # Changed to Z_Daily Return
        np.sqrt(252) * data['Boll_Daily Return'].mean() / data['Boll_Daily Return'].std(),  # Changed to Boll_Daily Return
        np.sqrt(252) * data['RSI_Daily Return'].mean() / data['RSI_Daily Return'].std(),  # Changed to RSI_Daily Return
        np.sqrt(252) * data['Final_Daily Return'].mean() / data['Final_Daily Return'].std()
    ],
    'Max Drawdown (%)': [
        ((data['Z_Portfolio Value'] - data['Z_Portfolio Value'].cummax()) / data['Z_Portfolio Value'].cummax()).min() * 100,  # Changed to Z_Portfolio Value
        ((data['Boll_Portfolio Value'] - data['Boll_Portfolio Value'].cummax()) / data['Boll_Portfolio Value'].cummax()).min() * 100,  # Changed to Boll_Portfolio Value
        ((data['RSI_Portfolio Value'] - data['RSI_Portfolio Value'].cummax()) / data['RSI_Portfolio Value'].cummax()).min() * 100,  # Changed to RSI_Portfolio Value
        ((data['Final_Portfolio Value'] - data['Final_Portfolio Value'].cummax()) / data['Final_Portfolio Value'].cummax()).min() * 100
    ]
}

summary_table = pd.DataFrame(summary_data)
summary_table = summary_table.round(2)
summary_table.set_index('Strategy', inplace=True)

# Display the table
print(summary_table)



